#Daja D. using python to make a scientific calculato

from tkinter import*
import math
import parser
import tkinter.messagebox


root = Tk()
root.title("Scientific Calculator")
root.configure(background="purple")
root.resizable(width=False, height=False)
root.geometry("374x369+0+0")

calc = Frame(root)
calc.grid()

#class calc nondeclared functions
class Calc():
    def __init__(self):
        self.total =0
        self.current = ""
        self.input_value = True
        self.check_sum = False
        self.op = ""
        self.result = False

    def numberEnter(self, num):
        self.result = False
        firstNum = txtDisplay.get()
        secondNum = str(num)
        if self.input_value:
            self.current = secondNum
            self.input_value = False
        else: 
            if secondNum == '.':
                if secondNum in firstNum:
                    return
            self.current = firstNum + secondNum
        self.display(self.current)

    def sum_of_total(self):
        self.result = True
        self.current = float(self.current)
        if self.check_sum == True:
            self.valid_function()
        else:
            self.total = float(txtDisplay.get())

    def display(self, value):
        txtDisplay.delete(0, END)
        txtDisplay.insert(0,value)

    def valid_function(self):
        if self.op == "add":
            self.total += self.current
        if self.op == "sub":
            self.total -= self.current
        if self.op == "multi":
            self.total *= self.current
        if self.op == "divide":
            self.total /= self.current
        if self.op == "mod":
            self.total %= self.current
        if self.op == "inv":
            self.total = 1/self.current
        self.input_value = True
        self.check_sum = False
        self.display(self.total)

    def operation(self, op):
        self.current = float(self.current)
        if self.check_sum:
            self.valid_function()
        elif not self.result:
            self.total = self.current
            self.input_value = True
        self.check_sum = True
        self.op = op
        self.result = False
    
    def clearEntry(self):
        self.result = False
        self.current = "0"
        self.display(0)
        self.input_value = True

    def allClear(self):
        self.clearEntry()
        self.total = 0

    def PM(self):
        self.result = False
        self.current = -(float(txtDisplay.get()))
        self.display(self.current)

    def squared(self):
        self.result = False
        self.current = math.sqrt(float(txtDisplay.get()))
        self.display(self.current)

    def cos(self):
        self.result = False
        self.current = math.cos(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def tan(self):
        self.result = False
        self.current = math.tan(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def cosh(self):
        self.result = False
        self.current = math.cosh(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def tanh(self):
        self.result = False
        self.current = math.tan(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def sin(self):
        self.result = False
        self.current = math.sin(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def tau(self):
        self.result = False
        self.current = math.e
        self.display(self.current)

    def acosh(self):
        self.result = False
        self.current = math.acosh(float(txtDisplay.get()))
        self.display(self.current)

    def asinh(self):
        self.result = False
        self.current = math.asinh(float(txtDisplay.get()))
        self.display(self.current)

    def sinh(self):
        self.result = False
        self.current = math.sinh(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def log(self):
        self.result = False
        self.current = math.exp(float(txtDisplay.get()))
        self.display(self.current)

    def exp(self):
        self.result = False
        self.current = math.exp(float(txtDisplay.get()))
        self.display(self.current)

    def pi(self):
        self.result = False
        self.current = math.pi
        self.display(self.current)

    def e(self):
        self.result = False
        self.current = math.e
        self.display(self.current)

    def expm1(self):
        self.result = False
        self.current = math.expm1(float(txtDisplay.get()))
        self.display(self.current)

    def lgamma(self):
        self.result = False
        self.current = math.lgamma(float(txtDisplay.get()))
        self.display(self.current)

    def degrees(self):
        self.result = False
        self.current = math.degrees(float(txtDisplay.get()))
        self.display(self.current)

    def log2(self):
        self.result = False
        self.current = math.log2(float(txtDisplay.get()))
        self.display(self.current)

    def log10(self):
        self.result = False
        self.current = math.log10(float(txtDisplay.get()))
        self.display(self.current)

    def log1p(self):
        self.result = False
        self.current = math.log1p(float(txtDisplay.get()))
        self.display(self.current)

    def square(self):
        self.result = False
        self.current = (float(txtDisplay.get())*(float(txtDisplay.get())))

added_value = Calc()

txtDisplay = Entry(calc, relief=SUNKEN, font=('arial', 20, 'bold'), bg= "purple", bd=30, width=28, justify=RIGHT)
txtDisplay.grid(row=0, column=0, columnspan=4 )
txtDisplay. insert(0,"0")

#creates the number pad 3x3 and has command to have the button works
numberpad = "789456123"
i = 0
btn = []
for j in range(2,5):
    for k in range(3):
        btn.append(Button(calc, width=6, height=2, font=('arial',20,'bold'), bg="gray99",bd = 4, text=numberpad[i]))
        btn[i].grid(row=j, column = k)
        btn[i]["command"] = lambda x = numberpad[i]: added_value.numberEnter(x)
        i += 1

#============================================standard calculator functions=============================================
btnClear = Button(calc, text=chr(67), width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = lambda: added_value.clear_entry).grid(row=1, column=0 )
btnAllClear = Button(calc, text=chr(67)+chr(69), width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4,
    command = lambda: added_value.all_clear_entry).grid(row=1, column=1 )

btnSqrt = Button(calc, text="√", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = lambda: added_value.squared).grid(row=1, column=2 )
btnAdd = Button(calc, text="+", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = lambda: added_value.operation("add")).grid(row=1, column=3 )

btnSub = Button(calc, text="-", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = lambda: added_value.operation("sub")).grid(row=2, column=3 )
btnMulti = Button(calc, text="*", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = lambda: added_value.operation("multi")).grid(row=4, column=3 )

btnDiv = Button(calc, text="÷", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = lambda: added_value.operation("divide")).grid(row=3, column=3 )
btnZero = Button(calc, text="0", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = lambda: added_value.numberEnter(0)).grid(row=5, column=0 )

btnDot = Button(calc, text=".", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = lambda: added_value.numberEnter(".")).grid(row=5, column=1 )
btnPM = Button(calc, text="±", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = lambda: added_value.PM).grid(row=5, column=2 )

btnEquals=Button(calc, text="=", width=6, height=2,
    font=('arial', 20, 'bold'), bd=4,
    command=added_value.sum_of_total).grid(row=5, column=3)
#================================Scientific Calculator============================================================
btnPi = Button(calc, text="π", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = added_value.pi).grid(row=1, column=4 )
btnCos = Button(calc, text="cos", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = added_value.cos).grid(row=1, column=5 )
btnTan = Button(calc, text="tan", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = added_value.tan).grid(row=1, column=6 )
btnSin = Button(calc, text="sin", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = added_value.sin).grid(row=1, column=7 )
#==================================================================================
btn2Pi = Button(calc, text="2π", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = added_value.tau).grid(row=2, column=4)
btnCosh = Button(calc, text="cosh", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = added_value.cosh).grid(row=2, column=5)
btnTanh = Button(calc, text="tanh", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = added_value.tanh).grid(row=2, column=6)
btnSinh = Button(calc, text="sinh", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = added_value.sinh).grid(row=2, column=7)
#==================================================================================
btnLog = Button(calc, text="log", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = added_value.log).grid(row=3, column=4 )
btnEXP = Button(calc, text="EXP", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = added_value.exp).grid(row=3, column=5 )
btnMod = Button(calc, text="Mod", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = lambda: added_value.operation("mod")).grid(row=3, column=6 )
btnE = Button(calc, text="e", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = added_value.e).grid(row=3, column=7 )
#==================================================================================
btnLog2 = Button(calc, text="log2", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4,
    command = added_value.log2).grid(row=4, column=4 )
btndeg = Button(calc, text="deg", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4,
    command = added_value.degrees).grid(row=4, column=5 )
btnAcosh = Button(calc, text="acosh", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = added_value.acosh).grid(row=4, column=6 )
btnsinh = Button(calc, text="sinh", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = added_value.asinh).grid(row=4, column=7 )
#==================================================================================
btnLog10 = Button(calc, text="log10", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = added_value.log10).grid(row=5, column=4 )
btnlog1p = Button(calc, text="log1p", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4, 
    command = added_value.log1p).grid(row=5, column=5 )
btnexpm1 = Button(calc, text="expm1", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4,
    command = added_value.expm1).grid(row=5, column=6 )
btnlgamma = Button(calc, text="lgamma", width=6, height=2, 
    font=('arial', 20, 'bold'), bd=4,
    command = added_value.lgamma).grid(row=5, column=7 )

#display of the text
lblDisplay = Label(calc, text="Scientific Calculator", font=('arial', 30, 'bold'), justify=CENTER)
lblDisplay.grid(row=0, column=4, columnspan=4)


# the menu of the calculator and functions

#Function to exit
def iExit():
    iExit = tkinter.messagebox.askyesno("Scientific  Calculator", "Confirm if you want to Exit.")
    if iExit > 0:
        root.destroy()
        return

#function for scientific calc
def Scientific():
    root.resizable(width=False, height=False)
    root.geometry("754x369+0+0")

#function for standard calc
def Standard():
    root.resizable(width=False, height=False)
    root.geometry("374x369+0+0")
menuBar = Menu(calc)

# file tab
fileMenu = Menu(menuBar, tearoff= 0)
menuBar.add_cascade(label = "File", menu=fileMenu)
fileMenu.add_command(label = "Standard", command = Standard)
fileMenu.add_command(label = "Scientific", command = Scientific)
fileMenu.add_separator()
fileMenu.add_command(label = "Exit", command = iExit)

#edit tab
editMenu = Menu(menuBar, tearoff= 0)
menuBar.add_cascade(label = "Edit", menu=editMenu)
editMenu.add_command(label = "Cut")
editMenu.add_command(label = "Copy")
editMenu.add_separator()
editMenu.add_command(label = "Paste")

#help tab
helpMenu = Menu(menuBar, tearoff= 0)
menuBar.add_cascade(label = "Help", menu=helpMenu)
helpMenu.add_command(label = "View Help")

root.configure(menu=menuBar)
root.mainloop()